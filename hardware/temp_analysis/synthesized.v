/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "node.v:1" *)
module node(clk, rst_n, incoming_var, incoming_var_valid, incoming_msg_type, incoming_mask, outgoing_var, outgoing_var_valid, outgoing_msg_type, outgoing_mask, node_busy, sat_found);
  (* src = "node.v:36" *)
  wire [3:0] _000_;
  (* src = "node.v:36" *)
  wire _001_;
  (* src = "node.v:36" *)
  wire [2:0] _002_;
  (* src = "node.v:36" *)
  wire [1:0] _003_;
  (* src = "node.v:36" *)
  wire [7:0] _004_;
  (* src = "node.v:36" *)
  wire _005_;
  (* src = "node.v:36" *)
  wire _006_;
  (* src = "node.v:36" *)
  wire [1:0] _007_;
  (* src = "node.v:36" *)
  wire [7:0] _008_;
  (* src = "node.v:36" *)
  wire _009_;
  (* src = "node.v:36" *)
  wire _010_;
  (* src = "node.v:36" *)
  wire _011_;
  (* src = "node.v:36" *)
  wire _012_;
  (* src = "node.v:36" *)
  wire _013_;
  (* src = "node.v:36" *)
  wire _014_;
  (* src = "node.v:36" *)
  wire _015_;
  (* src = "node.v:36" *)
  wire _016_;
  (* src = "node.v:36" *)
  wire _017_;
  (* src = "node.v:36" *)
  wire _018_;
  (* src = "node.v:36" *)
  wire _019_;
  (* src = "node.v:36" *)
  wire _020_;
  (* src = "node.v:36" *)
  wire _021_;
  (* src = "node.v:36" *)
  wire _022_;
  (* src = "node.v:36" *)
  wire _023_;
  (* src = "node.v:36" *)
  wire _024_;
  (* src = "node.v:33" *)
  wire _025_;
  (* src = "node.v:33" *)
  wire _026_;
  (* src = "node.v:33" *)
  wire _027_;
  (* src = "node.v:33" *)
  wire _028_;
  (* src = "node.v:9" *)
  wire _029_;
  (* src = "node.v:9" *)
  wire _030_;
  (* src = "node.v:9" *)
  wire _031_;
  (* src = "node.v:8" *)
  wire _032_;
  (* src = "node.v:8" *)
  wire _033_;
  (* src = "node.v:6" *)
  wire _034_;
  (* src = "node.v:6" *)
  wire _035_;
  (* src = "node.v:6" *)
  wire _036_;
  (* src = "node.v:6" *)
  wire _037_;
  (* src = "node.v:6" *)
  wire _038_;
  (* src = "node.v:6" *)
  wire _039_;
  (* src = "node.v:6" *)
  wire _040_;
  (* src = "node.v:6" *)
  wire _041_;
  (* src = "node.v:7" *)
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  (* src = "node.v:16" *)
  wire _081_;
  (* src = "node.v:15" *)
  wire _082_;
  (* src = "node.v:15" *)
  wire _083_;
  (* src = "node.v:15" *)
  wire _084_;
  (* src = "node.v:14" *)
  wire _085_;
  (* src = "node.v:14" *)
  wire _086_;
  (* src = "node.v:12" *)
  wire _087_;
  (* src = "node.v:12" *)
  wire _088_;
  (* src = "node.v:12" *)
  wire _089_;
  (* src = "node.v:12" *)
  wire _090_;
  (* src = "node.v:12" *)
  wire _091_;
  (* src = "node.v:12" *)
  wire _092_;
  (* src = "node.v:12" *)
  wire _093_;
  (* src = "node.v:12" *)
  wire _094_;
  (* src = "node.v:13" *)
  wire _095_;
  (* src = "node.v:17" *)
  wire _096_;
  (* src = "node.v:31" *)
  wire _097_;
  (* src = "node.v:31" *)
  wire _098_;
  (* src = "node.v:57|node.v:48|<techmap.v>:445" *)
  wire _099_;
  (* src = "node.v:57|node.v:48|<techmap.v>:445" *)
  wire _100_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _101_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _102_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _103_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _104_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _105_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _106_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _107_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _108_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _109_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _110_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _111_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _112_;
  (* src = "node.v:32" *)
  wire _113_;
  (* src = "node.v:32" *)
  wire _114_;
  (* src = "node.v:32" *)
  wire _115_;
  (* src = "node.v:32" *)
  wire _116_;
  (* src = "node.v:32" *)
  wire _117_;
  (* src = "node.v:32" *)
  wire _118_;
  (* src = "node.v:32" *)
  wire _119_;
  (* src = "node.v:32" *)
  wire _120_;
  wire [3:0] _121_;
  wire _122_;
  wire [3:0] _123_;
  (* src = "node.v:68" *)
  wire [3:0] _124_;
  wire [7:0] _125_;
  wire _126_;
  wire [7:0] _127_;
  (* src = "node.v:74" *)
  wire [7:0] _128_;
  wire _129_;
  wire _130_;
  wire [1:0] _131_;
  wire _132_;
  wire [3:0] _133_;
  wire [1:0] _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire [1:0] _158_;
  wire [1:0] _159_;
  wire [3:0] _160_;
  wire [7:0] _161_;
  wire [1:0] _162_;
  wire [1:0] _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  (* src = "node.v:50" *)
  wire _170_;
  (* src = "node.v:58" *)
  wire _171_;
  (* src = "node.v:64" *)
  wire _172_;
  (* src = "node.v:80" *)
  wire _173_;
  (* src = "node.v:50" *)
  wire _174_;
  wire [3:0] _175_;
  wire [3:0] _176_;
  wire _177_;
  wire [7:0] _178_;
  wire _179_;
  wire [1:0] _180_;
  wire [1:0] _181_;
  (* src = "node.v:57|node.v:48|<techmap.v>:423" *)
  wire [1:0] _182_;
  (* src = "node.v:57|node.v:48|<techmap.v>:424" *)
  wire [3:0] _183_;
  (* src = "node.v:57|node.v:48|<techmap.v>:432" *)
  wire [3:0] _184_;
  (* src = "node.v:57|node.v:48|<techmap.v>:437" *)
  wire [1:0] _185_;
  (* src = "node.v:57|node.v:48|<techmap.v>:437" *)
  wire [1:0] _186_;
  (* src = "node.v:57|node.v:48|<techmap.v>:425" *)
  wire [1:0] _187_;
  (* src = "node.v:57|node.v:48|<techmap.v>:426" *)
  wire [1:0] _188_;
  (* src = "node.v:57|node.v:48|<techmap.v>:428" *)
  wire [1:0] _189_;
  wire [1:0] _190_;
  wire _191_;
  wire _192_;
  (* src = "node.v:73|node.v:48|<techmap.v>:423" *)
  wire _193_;
  (* src = "node.v:73|node.v:48|<techmap.v>:424" *)
  wire [1:0] _194_;
  (* src = "node.v:73|node.v:48|<techmap.v>:432" *)
  wire [1:0] _195_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _196_;
  (* src = "node.v:73|node.v:48|<techmap.v>:425" *)
  wire [1:0] _197_;
  (* src = "node.v:73|node.v:48|<techmap.v>:426" *)
  wire _198_;
  (* src = "node.v:73|node.v:48|<techmap.v>:428" *)
  wire _199_;
  wire _200_;
  wire [2:0] _201_;
  (* src = "node.v:73|node.v:48|<techmap.v>:423" *)
  wire [1:0] _202_;
  (* src = "node.v:73|node.v:48|<techmap.v>:424" *)
  wire [3:0] _203_;
  (* src = "node.v:73|node.v:48|<techmap.v>:432" *)
  wire [3:0] _204_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _205_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _206_;
  (* src = "node.v:73|node.v:48|<techmap.v>:425" *)
  wire [1:0] _207_;
  (* src = "node.v:73|node.v:48|<techmap.v>:426" *)
  wire [1:0] _208_;
  (* src = "node.v:73|node.v:48|<techmap.v>:428" *)
  wire [1:0] _209_;
  wire [1:0] _210_;
  (* src = "node.v:73|node.v:48|<techmap.v>:423" *)
  wire _211_;
  (* src = "node.v:73|node.v:48|<techmap.v>:424" *)
  wire [1:0] _212_;
  (* src = "node.v:73|node.v:48|<techmap.v>:432" *)
  wire [1:0] _213_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _214_;
  (* src = "node.v:73|node.v:48|<techmap.v>:425" *)
  wire [1:0] _215_;
  (* src = "node.v:73|node.v:48|<techmap.v>:426" *)
  wire _216_;
  (* src = "node.v:73|node.v:48|<techmap.v>:428" *)
  wire _217_;
  wire _218_;
  (* src = "node.v:73|node.v:48|<techmap.v>:423" *)
  wire [7:0] _219_;
  (* src = "node.v:73|node.v:48|<techmap.v>:424" *)
  wire [15:0] _220_;
  (* src = "node.v:73|node.v:48|<techmap.v>:432" *)
  wire [15:0] _221_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _222_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _223_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _224_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _225_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _226_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _227_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _228_;
  (* src = "node.v:73|node.v:48|<techmap.v>:437" *)
  wire [1:0] _229_;
  (* src = "node.v:73|node.v:48|<techmap.v>:425" *)
  wire [1:0] _230_;
  (* src = "node.v:73|node.v:48|<techmap.v>:426" *)
  wire [7:0] _231_;
  (* src = "node.v:73|node.v:48|<techmap.v>:428" *)
  wire [7:0] _232_;
  wire [7:0] _233_;
  (* src = "node.v:68|<techmap.v>:246" *)
  wire _234_;
  (* src = "node.v:68|<techmap.v>:257" *)
  wire [3:0] _235_;
  (* src = "node.v:68|<techmap.v>:253" *)
  wire [3:0] _236_;
  (* src = "node.v:68|<techmap.v>:247" *)
  wire [3:0] _237_;
  (* src = "node.v:68|<techmap.v>:258" *)
  wire [3:0] _238_;
  (* src = "node.v:68|<techmap.v>:250" *)
  wire _239_;
  (* src = "node.v:68|<techmap.v>:253" *)
  wire [3:0] _240_;
  (* src = "node.v:68|<techmap.v>:250" *)
  wire _241_;
  (* src = "node.v:68|<techmap.v>:251" *)
  wire [3:0] _242_;
  (* src = "node.v:68|<techmap.v>:248" *)
  wire [3:0] _243_;
  (* src = "node.v:68|<techmap.v>:248" *)
  wire [3:0] _244_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:198" *)
  wire _245_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:200" *)
  wire [3:0] _246_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:197" *)
  wire [3:0] _247_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:197" *)
  wire [3:0] _248_;
  wire [1023:0] _249_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:203" *)
  wire [3:0] _250_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:202" *)
  wire [31:0] _251_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:202" *)
  wire [31:0] _252_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "1 2 3" *)
  wire [3:0] _253_;
  wire [3:0] _254_;
  wire [3:0] _255_;
  (* src = "node.v:74|<techmap.v>:246" *)
  wire _256_;
  (* src = "node.v:74|<techmap.v>:257" *)
  wire [7:0] _257_;
  (* src = "node.v:74|<techmap.v>:253" *)
  wire [7:0] _258_;
  (* src = "node.v:74|<techmap.v>:247" *)
  wire [7:0] _259_;
  (* src = "node.v:74|<techmap.v>:258" *)
  wire [7:0] _260_;
  (* src = "node.v:74|<techmap.v>:250" *)
  wire _261_;
  (* src = "node.v:74|<techmap.v>:253" *)
  wire [7:0] _262_;
  (* src = "node.v:74|<techmap.v>:250" *)
  wire _263_;
  (* src = "node.v:74|<techmap.v>:251" *)
  wire [7:0] _264_;
  (* src = "node.v:74|<techmap.v>:248" *)
  wire [7:0] _265_;
  (* src = "node.v:74|<techmap.v>:248" *)
  wire [7:0] _266_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:198" *)
  wire _267_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:200" *)
  wire [7:0] _268_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:197" *)
  wire [7:0] _269_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:197" *)
  wire [7:0] _270_;
  wire [1023:0] _271_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:203" *)
  wire [7:0] _272_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:202" *)
  wire [31:0] _273_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:202" *)
  wire [31:0] _274_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "1 2 3 4 5 6 7" *)
  wire [7:0] _275_;
  wire [7:0] _276_;
  wire [7:0] _277_;
  (* src = "node.v:57|node.v:48|<techmap.v>:434" *)
  wire [1:0] _278_;
  (* src = "node.v:57|node.v:48|<techmap.v>:434" *)
  wire [1:0] _279_;
  (* src = "node.v:57|node.v:48|<techmap.v>:441" *)
  wire _280_;
  (* src = "node.v:57|node.v:48|<techmap.v>:441" *)
  wire _281_;
  (* src = "node.v:57|node.v:48|<techmap.v>:445" *)
  wire _282_;
  (* src = "node.v:57|node.v:48|<techmap.v>:445" *)
  wire [1:0] _283_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire _284_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire _285_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _286_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _287_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _288_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire [1:0] _289_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire [1:0] _290_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _291_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _292_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _293_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire [1:0] _294_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire _295_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire _296_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _297_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _298_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _299_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire [7:0] _300_;
  (* src = "node.v:73|node.v:48|<techmap.v>:434" *)
  wire [7:0] _301_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _302_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _303_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _304_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _305_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _306_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _307_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _308_;
  (* src = "node.v:73|node.v:48|<techmap.v>:441" *)
  wire _309_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire _310_;
  (* src = "node.v:73|node.v:48|<techmap.v>:445" *)
  wire [7:0] _311_;
  (* src = "node.v:68|<techmap.v>:260" *)
  wire [3:0] _312_;
  (* src = "node.v:68|<techmap.v>:258" *)
  wire [3:0] _313_;
  (* src = "node.v:68|<techmap.v>:258" *)
  wire [3:0] _314_;
  (* src = "node.v:68|<techmap.v>:262" *)
  wire [3:0] _315_;
  (* src = "node.v:68|<techmap.v>:263" *)
  wire [4:0] _316_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:212" *)
  wire _317_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:221" *)
  wire _318_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:221" *)
  wire _319_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:221" *)
  wire _320_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:222" *)
  wire _321_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:229" *)
  wire _322_;
  (* src = "node.v:68|<techmap.v>:260|<techmap.v>:221" *)
  wire _323_;
  (* src = "node.v:74|<techmap.v>:260" *)
  wire [7:0] _324_;
  (* src = "node.v:74|<techmap.v>:258" *)
  wire [7:0] _325_;
  (* src = "node.v:74|<techmap.v>:258" *)
  wire [7:0] _326_;
  (* src = "node.v:74|<techmap.v>:262" *)
  wire [7:0] _327_;
  (* src = "node.v:74|<techmap.v>:263" *)
  wire [8:0] _328_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:212" *)
  wire _329_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _330_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _331_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _332_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _333_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _334_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _335_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _336_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:222" *)
  wire _337_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:222" *)
  wire _338_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:222" *)
  wire _339_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:222" *)
  wire _340_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:229" *)
  wire _341_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:229" *)
  wire _342_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:229" *)
  wire _343_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:229" *)
  wire _344_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _345_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _346_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _347_;
  (* src = "node.v:74|<techmap.v>:260|<techmap.v>:221" *)
  wire _348_;
  (* src = "node.v:33" *)
  reg [3:0] clause_counter;
  (* src = "node.v:2" *)
  input clk;
  (* src = "node.v:9" *)
  input [2:0] incoming_mask;
  (* src = "node.v:8" *)
  input [1:0] incoming_msg_type;
  (* src = "node.v:6" *)
  input [7:0] incoming_var;
  (* src = "node.v:7" *)
  input incoming_var_valid;
  (* src = "node.v:16" *)
  output node_busy;
  reg node_busy;
  (* src = "node.v:15" *)
  output [2:0] outgoing_mask;
  reg [2:0] outgoing_mask;
  (* src = "node.v:14" *)
  output [1:0] outgoing_msg_type;
  reg [1:0] outgoing_msg_type;
  (* src = "node.v:12" *)
  output [7:0] outgoing_var;
  reg [7:0] outgoing_var;
  (* src = "node.v:13" *)
  output outgoing_var_valid;
  reg outgoing_var_valid;
  (* src = "node.v:3" *)
  input rst_n;
  (* src = "node.v:17" *)
  output sat_found;
  reg sat_found;
  (* src = "node.v:31" *)
  reg [1:0] state;
  (* src = "node.v:32" *)
  reg [7:0] var_counter;
  sky130_fd_sc_hd__clkinv_1 _349_ (
    .A(_085_),
    .Y(_065_)
  );
  sky130_fd_sc_hd__nor3b_1 _350_ (
    .A(_097_),
    .B(_098_),
    .C_N(_042_),
    .Y(_066_)
  );
  sky130_fd_sc_hd__nand3b_1 _351_ (
    .A_N(_033_),
    .B(_066_),
    .C(_032_),
    .Y(_067_)
  );
  sky130_fd_sc_hd__mux2_1 _352_ (
    .A0(_034_),
    .A1(_113_),
    .S(_067_),
    .X(_017_)
  );
  sky130_fd_sc_hd__lpflow_isobufsrc_1 _353_ (
    .A(_097_),
    .SLEEP(_098_),
    .X(_068_)
  );
  sky130_fd_sc_hd__nand3b_1 _354_ (
    .A_N(_032_),
    .B(_033_),
    .C(_025_),
    .Y(_069_)
  );
  sky130_fd_sc_hd__nor4bb_1 _355_ (
    .A(_098_),
    .B(_032_),
    .C_N(_033_),
    .D_N(_097_),
    .Y(_070_)
  );
  sky130_fd_sc_hd__nand2_1 _356_ (
    .A(_025_),
    .B(_070_),
    .Y(_071_)
  );
  sky130_fd_sc_hd__nand4_1 _357_ (
    .A(_027_),
    .B(_026_),
    .C(_025_),
    .D(_070_),
    .Y(_072_)
  );
  sky130_fd_sc_hd__a31oi_1 _358_ (
    .A1(_026_),
    .A2(_025_),
    .A3(_070_),
    .B1(_027_),
    .Y(_073_)
  );
  sky130_fd_sc_hd__lpflow_isobufsrc_1 _359_ (
    .A(_072_),
    .SLEEP(_073_),
    .X(_011_)
  );
  sky130_fd_sc_hd__and3_1 _360_ (
    .A(_113_),
    .B(_115_),
    .C(_114_),
    .X(_074_)
  );
  sky130_fd_sc_hd__and4_1 _361_ (
    .A(_113_),
    .B(_115_),
    .C(_116_),
    .D(_114_),
    .X(_075_)
  );
  sky130_fd_sc_hd__and3_1 _362_ (
    .A(_117_),
    .B(_118_),
    .C(_075_),
    .X(_076_)
  );
  sky130_fd_sc_hd__nand4_1 _363_ (
    .A(_119_),
    .B(_117_),
    .C(_118_),
    .D(_075_),
    .Y(_077_)
  );
  sky130_fd_sc_hd__nand2b_1 _364_ (
    .A_N(_097_),
    .B(_098_),
    .Y(_078_)
  );
  sky130_fd_sc_hd__nor2_1 _365_ (
    .A(_077_),
    .B(_078_),
    .Y(_079_)
  );
  sky130_fd_sc_hd__a21o_1 _366_ (
    .A1(_120_),
    .A2(_079_),
    .B1(_096_),
    .X(_016_)
  );
  sky130_fd_sc_hd__mux2_1 _367_ (
    .A0(_082_),
    .A1(_029_),
    .S(_070_),
    .X(_013_)
  );
  sky130_fd_sc_hd__xnor2_1 _368_ (
    .A(_026_),
    .B(_071_),
    .Y(_010_)
  );
  sky130_fd_sc_hd__mux2_1 _369_ (
    .A0(_036_),
    .A1(_115_),
    .S(_067_),
    .X(_019_)
  );
  sky130_fd_sc_hd__mux2_1 _370_ (
    .A0(_035_),
    .A1(_114_),
    .S(_067_),
    .X(_018_)
  );
  sky130_fd_sc_hd__xor2_1 _371_ (
    .A(_025_),
    .B(_070_),
    .X(_009_)
  );
  sky130_fd_sc_hd__mux2_1 _372_ (
    .A0(_084_),
    .A1(_031_),
    .S(_070_),
    .X(_015_)
  );
  sky130_fd_sc_hd__nor2b_1 _373_ (
    .A(_070_),
    .B_N(_078_),
    .Y(_080_)
  );
  sky130_fd_sc_hd__nand2b_1 _374_ (
    .A_N(_095_),
    .B(_080_),
    .Y(_104_)
  );
  sky130_fd_sc_hd__mux2_1 _375_ (
    .A0(_037_),
    .A1(_116_),
    .S(_067_),
    .X(_020_)
  );
  sky130_fd_sc_hd__nand3_1 _376_ (
    .A(_027_),
    .B(_026_),
    .C(_028_),
    .Y(_043_)
  );
  sky130_fd_sc_hd__o21ai_0 _377_ (
    .A1(_069_),
    .A2(_043_),
    .B1(_068_),
    .Y(_044_)
  );
  sky130_fd_sc_hd__nand2_1 _378_ (
    .A(_067_),
    .B(_044_),
    .Y(_099_)
  );
  sky130_fd_sc_hd__nor2_1 _379_ (
    .A(_071_),
    .B(_043_),
    .Y(_100_)
  );
  sky130_fd_sc_hd__xnor2_1 _380_ (
    .A(_028_),
    .B(_072_),
    .Y(_012_)
  );
  sky130_fd_sc_hd__mux2_1 _381_ (
    .A0(_038_),
    .A1(_117_),
    .S(_067_),
    .X(_021_)
  );
  sky130_fd_sc_hd__mux2_1 _382_ (
    .A0(_040_),
    .A1(_119_),
    .S(_067_),
    .X(_023_)
  );
  sky130_fd_sc_hd__mux2_1 _383_ (
    .A0(_041_),
    .A1(_120_),
    .S(_067_),
    .X(_024_)
  );
  sky130_fd_sc_hd__mux2_1 _384_ (
    .A0(_039_),
    .A1(_118_),
    .S(_067_),
    .X(_022_)
  );
  sky130_fd_sc_hd__nand2_1 _385_ (
    .A(_081_),
    .B(_078_),
    .Y(_045_)
  );
  sky130_fd_sc_hd__nand2_1 _386_ (
    .A(_067_),
    .B(_045_),
    .Y(_101_)
  );
  sky130_fd_sc_hd__o21ai_0 _387_ (
    .A1(_065_),
    .A2(_070_),
    .B1(_078_),
    .Y(_102_)
  );
  sky130_fd_sc_hd__mux2_1 _388_ (
    .A0(_083_),
    .A1(_030_),
    .S(_070_),
    .X(_014_)
  );
  sky130_fd_sc_hd__nor2_1 _389_ (
    .A(_113_),
    .B(_078_),
    .Y(_046_)
  );
  sky130_fd_sc_hd__a221o_1 _390_ (
    .A1(_113_),
    .A2(_070_),
    .B1(_080_),
    .B2(_087_),
    .C1(_046_),
    .X(_105_)
  );
  sky130_fd_sc_hd__a21oi_1 _391_ (
    .A1(_113_),
    .A2(_114_),
    .B1(_115_),
    .Y(_047_)
  );
  sky130_fd_sc_hd__nor3_1 _392_ (
    .A(_074_),
    .B(_078_),
    .C(_047_),
    .Y(_048_)
  );
  sky130_fd_sc_hd__a221o_1 _393_ (
    .A1(_115_),
    .A2(_070_),
    .B1(_080_),
    .B2(_089_),
    .C1(_048_),
    .X(_107_)
  );
  sky130_fd_sc_hd__a21oi_1 _394_ (
    .A1(_113_),
    .A2(_114_),
    .B1(_078_),
    .Y(_049_)
  );
  sky130_fd_sc_hd__o21ai_0 _395_ (
    .A1(_113_),
    .A2(_114_),
    .B1(_049_),
    .Y(_050_)
  );
  sky130_fd_sc_hd__a22oi_1 _396_ (
    .A1(_114_),
    .A2(_070_),
    .B1(_080_),
    .B2(_088_),
    .Y(_051_)
  );
  sky130_fd_sc_hd__nand2_1 _397_ (
    .A(_050_),
    .B(_051_),
    .Y(_106_)
  );
  sky130_fd_sc_hd__o21a_1 _398_ (
    .A1(_086_),
    .A2(_070_),
    .B1(_078_),
    .X(_103_)
  );
  sky130_fd_sc_hd__nand2_1 _399_ (
    .A(_090_),
    .B(_080_),
    .Y(_052_)
  );
  sky130_fd_sc_hd__o2bb2ai_1 _400_ (
    .A1_N(_116_),
    .A2_N(_070_),
    .B1(_075_),
    .B2(_078_),
    .Y(_053_)
  );
  sky130_fd_sc_hd__o21ai_0 _401_ (
    .A1(_116_),
    .A2(_074_),
    .B1(_053_),
    .Y(_054_)
  );
  sky130_fd_sc_hd__nand2_1 _402_ (
    .A(_052_),
    .B(_054_),
    .Y(_108_)
  );
  sky130_fd_sc_hd__a21oi_1 _403_ (
    .A1(_117_),
    .A2(_075_),
    .B1(_078_),
    .Y(_055_)
  );
  sky130_fd_sc_hd__a22oi_1 _404_ (
    .A1(_117_),
    .A2(_070_),
    .B1(_080_),
    .B2(_091_),
    .Y(_056_)
  );
  sky130_fd_sc_hd__o21ai_0 _405_ (
    .A1(_117_),
    .A2(_075_),
    .B1(_055_),
    .Y(_057_)
  );
  sky130_fd_sc_hd__nand2_1 _406_ (
    .A(_056_),
    .B(_057_),
    .Y(_109_)
  );
  sky130_fd_sc_hd__a21oi_1 _407_ (
    .A1(_117_),
    .A2(_075_),
    .B1(_118_),
    .Y(_058_)
  );
  sky130_fd_sc_hd__a22oi_1 _408_ (
    .A1(_118_),
    .A2(_070_),
    .B1(_080_),
    .B2(_092_),
    .Y(_059_)
  );
  sky130_fd_sc_hd__o31ai_1 _409_ (
    .A1(_076_),
    .A2(_078_),
    .A3(_058_),
    .B1(_059_),
    .Y(_110_)
  );
  sky130_fd_sc_hd__a41oi_1 _410_ (
    .A1(_119_),
    .A2(_117_),
    .A3(_118_),
    .A4(_075_),
    .B1(_078_),
    .Y(_060_)
  );
  sky130_fd_sc_hd__o21ai_0 _411_ (
    .A1(_070_),
    .A2(_060_),
    .B1(_119_),
    .Y(_061_)
  );
  sky130_fd_sc_hd__a22oi_1 _412_ (
    .A1(_093_),
    .A2(_080_),
    .B1(_060_),
    .B2(_076_),
    .Y(_062_)
  );
  sky130_fd_sc_hd__nand2_1 _413_ (
    .A(_061_),
    .B(_062_),
    .Y(_111_)
  );
  sky130_fd_sc_hd__o21ai_0 _414_ (
    .A1(_070_),
    .A2(_060_),
    .B1(_120_),
    .Y(_063_)
  );
  sky130_fd_sc_hd__nand2_1 _415_ (
    .A(_094_),
    .B(_080_),
    .Y(_064_)
  );
  sky130_fd_sc_hd__o311ai_0 _416_ (
    .A1(_120_),
    .A2(_077_),
    .A3(_078_),
    .B1(_063_),
    .C1(_064_),
    .Y(_112_)
  );
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[0] <= 0;
    else
      outgoing_var[0] <= _004_[0];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[1] <= 0;
    else
      outgoing_var[1] <= _004_[1];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[2] <= 0;
    else
      outgoing_var[2] <= _004_[2];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[3] <= 0;
    else
      outgoing_var[3] <= _004_[3];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[4] <= 0;
    else
      outgoing_var[4] <= _004_[4];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[5] <= 0;
    else
      outgoing_var[5] <= _004_[5];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[6] <= 0;
    else
      outgoing_var[6] <= _004_[6];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var[7] <= 0;
    else
      outgoing_var[7] <= _004_[7];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_var_valid <= 0;
    else
      outgoing_var_valid <= _005_;
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_msg_type[0] <= 0;
    else
      outgoing_msg_type[0] <= _003_[0];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_msg_type[1] <= 0;
    else
      outgoing_msg_type[1] <= _003_[1];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_mask[0] <= 0;
    else
      outgoing_mask[0] <= _002_[0];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_mask[1] <= 0;
    else
      outgoing_mask[1] <= _002_[1];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      outgoing_mask[2] <= 0;
    else
      outgoing_mask[2] <= _002_[2];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      node_busy <= 0;
    else
      node_busy <= _001_;
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      sat_found <= 0;
    else
      sat_found <= _006_;
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      state[0] <= 0;
    else
      state[0] <= _007_[0];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      state[1] <= 0;
    else
      state[1] <= _007_[1];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[0] <= 0;
    else
      var_counter[0] <= _008_[0];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[1] <= 0;
    else
      var_counter[1] <= _008_[1];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[2] <= 0;
    else
      var_counter[2] <= _008_[2];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[3] <= 0;
    else
      var_counter[3] <= _008_[3];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[4] <= 0;
    else
      var_counter[4] <= _008_[4];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[5] <= 0;
    else
      var_counter[5] <= _008_[5];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[6] <= 0;
    else
      var_counter[6] <= _008_[6];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      var_counter[7] <= 0;
    else
      var_counter[7] <= _008_[7];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      clause_counter[0] <= 0;
    else
      clause_counter[0] <= _000_[0];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      clause_counter[1] <= 0;
    else
      clause_counter[1] <= _000_[1];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      clause_counter[2] <= 0;
    else
      clause_counter[2] <= _000_[2];
  (* src = "node.v:36" *)
  always @(posedge clk or negedge rst_n)
    if (!rst_n)
      clause_counter[3] <= 0;
    else
      clause_counter[3] <= _000_[3];
  assign _007_ = _283_;
  assign _184_[1:0] = _278_;
  assign _184_[3:2] = _279_;
  assign _185_[0] = _184_[0];
  assign _185_[1] = _184_[2];
  assign _189_[0] = _280_;
  assign _186_[0] = _184_[1];
  assign _186_[1] = _184_[3];
  assign _189_[1] = _281_;
  assign _001_ = _288_;
  assign _195_[0] = _284_;
  assign _195_[1] = _285_;
  assign _196_[0] = _195_[0];
  assign _196_[1] = _195_[1];
  assign _199_ = _286_;
  assign _003_ = _294_;
  assign _204_[1:0] = _289_;
  assign _204_[3:2] = _290_;
  assign _205_[0] = _204_[0];
  assign _205_[1] = _204_[2];
  assign _209_[0] = _291_;
  assign _206_[0] = _204_[1];
  assign _206_[1] = _204_[3];
  assign _209_[1] = _292_;
  assign _005_ = _299_;
  assign _213_[0] = _295_;
  assign _213_[1] = _296_;
  assign _214_[0] = _213_[0];
  assign _214_[1] = _213_[1];
  assign _217_ = _297_;
  assign _004_ = _311_;
  assign _221_[7:0] = _300_;
  assign _221_[15:8] = _301_;
  assign _222_[0] = _221_[0];
  assign _222_[1] = _221_[8];
  assign _232_[0] = _302_;
  assign _223_[0] = _221_[1];
  assign _223_[1] = _221_[9];
  assign _232_[1] = _303_;
  assign _224_[0] = _221_[2];
  assign _224_[1] = _221_[10];
  assign _232_[2] = _304_;
  assign _225_[0] = _221_[3];
  assign _225_[1] = _221_[11];
  assign _232_[3] = _305_;
  assign _226_[0] = _221_[4];
  assign _226_[1] = _221_[12];
  assign _232_[4] = _306_;
  assign _227_[0] = _221_[5];
  assign _227_[1] = _221_[13];
  assign _232_[5] = _307_;
  assign _228_[0] = _221_[6];
  assign _228_[1] = _221_[14];
  assign _232_[6] = _308_;
  assign _229_[0] = _221_[7];
  assign _229_[1] = _221_[15];
  assign _232_[7] = _309_;
  assign _235_ = _236_;
  assign _238_ = _314_;
  assign _254_ = _315_;
  assign _124_ = _316_[3:0];
  assign _257_ = _258_;
  assign _260_ = _326_;
  assign _276_ = _327_;
  assign _128_ = _328_[7:0];
  assign _249_ = 1024'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070726f633b206f7074202d66617374;
  assign _250_ = _255_;
  assign _253_[0] = _254_[0];
  assign _252_ = 32'd4;
  assign _251_ = 32'd0;
  assign _240_ = clause_counter;
  assign _236_ = 4'h1;
  assign _271_ = 1024'h000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070726f633b206f7074202d66617374;
  assign _272_ = _277_;
  assign _275_[0] = _276_[0];
  assign _274_ = 32'd8;
  assign _273_ = 32'd0;
  assign _262_ = var_counter;
  assign _258_ = 8'h01;
  assign _113_ = var_counter[0];
  assign _008_[0] = _017_;
  assign _115_ = var_counter[2];
  assign _116_ = var_counter[3];
  assign _042_ = incoming_var_valid;
  assign _027_ = clause_counter[2];
  assign _000_[2] = _011_;
  assign _097_ = state[0];
  assign _086_ = outgoing_msg_type[1];
  assign _098_ = state[1];
  assign _096_ = sat_found;
  assign _006_ = _016_;
  assign _114_ = var_counter[1];
  assign _082_ = outgoing_mask[0];
  assign _029_ = incoming_mask[0];
  assign _002_[0] = _013_;
  assign _085_ = outgoing_msg_type[0];
  assign _034_ = incoming_var[0];
  assign _032_ = incoming_msg_type[0];
  assign _083_ = outgoing_mask[1];
  assign _030_ = incoming_mask[1];
  assign _026_ = clause_counter[1];
  assign _000_[1] = _010_;
  assign _033_ = incoming_msg_type[1];
  assign _028_ = clause_counter[3];
  assign _088_ = outgoing_var[1];
  assign _087_ = outgoing_var[0];
  assign _095_ = outgoing_var_valid;
  assign _008_[2] = _019_;
  assign _008_[1] = _018_;
  assign _089_ = outgoing_var[2];
  assign _093_ = outgoing_var[6];
  assign _119_ = var_counter[6];
  assign _094_ = outgoing_var[7];
  assign _120_ = var_counter[7];
  assign _025_ = clause_counter[0];
  assign _000_[0] = _009_;
  assign _084_ = outgoing_mask[2];
  assign _002_[2] = _015_;
  assign _117_ = var_counter[4];
  assign _299_ = _104_;
  assign _118_ = var_counter[5];
  assign _041_ = incoming_var[7];
  assign _008_[3] = _020_;
  assign _283_[0] = _099_;
  assign _000_[3] = _012_;
  assign _008_[4] = _021_;
  assign _008_[6] = _023_;
  assign _008_[7] = _024_;
  assign _008_[5] = _022_;
  assign _081_ = node_busy;
  assign _288_ = _101_;
  assign _035_ = incoming_var[1];
  assign _294_[0] = _102_;
  assign _036_ = incoming_var[2];
  assign _031_ = incoming_mask[2];
  assign _002_[1] = _014_;
  assign _038_ = incoming_var[4];
  assign _037_ = incoming_var[3];
  assign _040_ = incoming_var[6];
  assign _039_ = incoming_var[5];
  assign _311_[0] = _105_;
  assign _311_[2] = _107_;
  assign _311_[1] = _106_;
  assign _090_ = outgoing_var[3];
  assign _091_ = outgoing_var[4];
  assign _092_ = outgoing_var[5];
  assign _294_[1] = _103_;
  assign _283_[1] = _100_;
  assign _311_[3] = _108_;
  assign _311_[4] = _109_;
  assign _311_[5] = _110_;
  assign _311_[6] = _111_;
  assign _311_[7] = _112_;
endmodule
